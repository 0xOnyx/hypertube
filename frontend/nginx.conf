events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Configuration des logs pour le debugging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;

    # Paramètres SSL globaux
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Configuration de sécurité
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Serveur HTTP pour localhost (développement)
    server {
        listen       80;
        server_name  localhost 127.0.0.1;
        root         /usr/share/nginx/html;
        index        index.html;

        # Proxy pour les API - redirige vers l'API Gateway (priorité haute)
        location ^~ /api/ {
            # Retire /api du chemin et passe le reste à l'API Gateway
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://api-gateway:8080;
            
            # Headers de proxy standards
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts pour éviter les blocages
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Headers CORS
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            
            # Gestion des requêtes OPTIONS pour CORS preflight
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Length 0 always;
                add_header Content-Type text/plain always;
                return 204;
            }
        }

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # Handle Angular routing (priorité basse - après /api)
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    }

    # Redirection HTTP vers HTTPS pour hypertube.com (pour ceux qui accèdent sans port)
    server {
        listen 80;
        server_name hypertube.com www.hypertube.com;
        
        # Redirection vers HTTPS avec port 8443
        return 301 https://$server_name:8443$request_uri;
    }

    # Serveur HTTPS pour hypertube.com et localhost
    server {
        listen 443 ssl http2;
        server_name hypertube.com www.hypertube.com localhost 127.0.0.1;
        root /usr/share/nginx/html;
        index index.html;

        # Configuration SSL
        ssl_certificate /etc/nginx/ssl/hypertube.crt;
        ssl_certificate_key /etc/nginx/ssl/hypertube.key;
        
        # Amélioration de la sécurité SSL
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Headers de sécurité HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https: wss:; media-src 'self'; object-src 'none'; child-src 'none'; frame-ancestors 'none';" always;

        # Proxy pour les API - redirige vers l'API Gateway (priorité haute)
        location ^~ /api/ {
            # Retire /api du chemin et passe le reste à l'API Gateway
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://api-gateway:8080;
            
            # Headers de proxy standards avec support HTTPS
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header X-Forwarded-Ssl on;
            
            # Timeouts pour éviter les blocages
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Headers CORS adaptés (plus permissifs pour le développement)
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials true always;
            
            # Gestion des requêtes OPTIONS pour CORS preflight
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Length 0 always;
                add_header Content-Type text/plain always;
                return 204;
            }
        }

        # WebSocket support pour les fonctionnalités temps réel
        location /ws/ {
            proxy_pass http://api-gateway:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Cache static assets avec headers de sécurité
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options "nosniff" always;
        }

        # Protection contre les fichiers sensibles
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~* \.(env|config|sql|log)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Handle Angular routing (priorité basse - après /api)
        location / {
            try_files $uri $uri/ /index.html;
            
            # Headers pour l'application Angular
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
        }

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        gzip_comp_level 6;
    }

    # Serveur de monitoring/health check (optionnel)
    server {
        listen 8080;
        server_name localhost;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.0.0.0/8;
            deny all;
        }
    }
} 