services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: hypertube-postgres-dev
    environment:
      POSTGRES_DB: hypertube
      POSTGRES_USER: hypertube_user
      POSTGRES_PASSWORD: hypertube_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./backend/database/init-combined:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hypertube_user -d hypertube"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: hypertube-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Auth Service (Spring Boot avec devtools et hot reload)
  auth-service:
    image: maven:3.9.4-amazoncorretto-21
    container_name: hypertube-auth-service
    ports:
      - "8081:8081"
      - "35729:35729"  # Port pour LiveReload de Spring DevTools
    volumes:
      - ./backend/auth-service:/app
      - maven_cache_dev:/root/.m2  # Cache Maven pour éviter de re-télécharger les dépendances
    working_dir: /app
    command: >
      sh -c "
        mvn clean compile &&
        mvn spring-boot:run -Dspring-boot.run.jvmArguments='-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true'
      "
    environment:
      - SPRING_PROFILES_ACTIVE=docker,dev
      - EMAIL_VERIFICATION_ENABLED=false
      - EUREKA_REGISTER=false
      - EUREKA_FETCH=false
      # Configuration Redis explicite
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      # Configuration PostgreSQL explicite
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/hypertube
      - SPRING_DATASOURCE_USERNAME=hypertube_user
      - SPRING_DATASOURCE_PASSWORD=hypertube_password
      # Configuration JWT
      - JWT_SECRET=dev-jwt-secret-key-hypertube-development-environment-secure-256-bits
      - JWT_EXPIRATION=86400000
      - JWT_REFRESH_EXPIRATION=2592000000
      # Configuration Frontend
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:4200}
      # Configuration Server
      - SERVER_PORT=8081
      # Configuration DevTools pour hot reload
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
      - SPRING_DEVTOOLS_RESTART_POLL_INTERVAL=1000
      - SPRING_DEVTOOLS_RESTART_QUIET_PERIOD=400
      # Configuration Email (optionnelle)
      - EMAIL_FROM=noreply@hypertube.com
      - MAIL_HOST=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USERNAME=${MAIL_USERNAME:-}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-}
      - MAIL_TEST_CONNECTION=false
      # Désactiver l'auto-configuration Spring Boot Mail si pas configuré
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration
      # Configuration OAuth2 (optionnelle - laissez vide pour désactiver)
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - FORTYTWO_CLIENT_ID=${FORTYTWO_CLIENT_ID:-}
      - FORTYTWO_CLIENT_SECRET=${FORTYTWO_CLIENT_SECRET:-}
      # Configuration Eureka
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka
      # Configuration des logs
      - LOGGING_LEVEL_COM_HYPERTUBE_AUTH=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG
      - LOGGING_LEVEL_ROOT=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Video Service (NestJS avec nodemon)
  video-service:
    image: node:20-alpine
    container_name: hypertube-video-dev
    ports:
      - "3002:3002"
    volumes:
      - ./backend/video-service:/app
      - /app/node_modules  # Anonymous volume for node_modules
      - ./videos:/app/videos
      - ./logs:/app/logs
    working_dir: /app
    command: >
      sh -c "
        npm install &&
        npm run start:dev
      "
    environment:
      - NODE_ENV=development
      - PORT=3002
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=hypertube_user
      - POSTGRES_PASSWORD=hypertube_password
      - POSTGRES_DB=hypertube
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway (Spring Boot)
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: hypertube-gateway-dev
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET=dev-jwt-secret-key-hypertube-development-environment-secure-256-bits
      - EUREKA_REGISTER=false
      - EUREKA_FETCH=false
      - LOG_LEVEL=DEBUG
      - SERVER_PORT=8080
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AUTH_SERVICE_URL=http://auth-service:8081
      - VIDEO_SERVICE_URL=http://video-service:3002
    depends_on:
      auth-service:
        condition: service_healthy
      video-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Angular (avec hot reload)
  frontend:
    image: node:20
    container_name: hypertube-frontend-dev
    ports:
      - "4200:4200"  # Port de développement direct
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume for node_modules
    working_dir: /app
    command: >
      sh -c "
        npm install &&
        npm start -- --host 0.0.0.0 --port 4200 --poll 2000
      "
    environment:
      - NODE_ENV=development
      - NG_CLI_ANALYTICS=false
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4200"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy pour HTTPS (ports différents pour éviter les conflits)
  nginx:
    image: nginx:alpine
    container_name: hypertube-nginx-dev
    ports:
      - "6969:80"      # HTTP pour hypertube.com (dev sans SSL)
      - "8090:80"      # Port alternatif
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - api-gateway
    command: >
      sh -c "
        nginx -g 'daemon off;'
      "

volumes:
  postgres_data_dev:
  redis_data_dev:
  maven_cache_dev: 
